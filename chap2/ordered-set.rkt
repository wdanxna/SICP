#lang planet neil/sicp
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((< x (car set)) false)
        ((= x (car set)) true)
        (else (element-of-set? x (cdr set)))))

(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
      '()
      (cond ((= (car set1) (car set2))
             (cons (car set1)
                   (intersection-set (cdr set1) (cdr set2))))
            ((< (car set1) (car set2))
             (intersection-set (cdr set1) set2))
            (else (intersection-set set1 (cdr set2))))))

;;2.61
(define (adjoin-set x set)
  (if (null? set)
      (list x)
      (cond ((= x (car set)) set)
            ((< x (car set)) (cons x set))
            (else (cons (car set)
                        (adjoin-set x (cdr set)))))))

;;2.62
(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        ((= (car set1) (car set2))
         (cons (car set1)(union-set (cdr set1) (cdr set2))))
        ((< (car set1) (car set2))
         (cons (car set1)
               (union-set (cdr set1) set2)))
        (else (cons (car set2)
                    (union-set set1 (cdr set2))))))